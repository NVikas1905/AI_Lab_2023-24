Ex.No: 13 Learning â€“ Use Supervised Learning
### DATE:22/04/24                                                                            
### REGISTER NUMBER : 212221040179
### AIM: 

To write a program to train the classifier for diabeties.
###  Algorithm:
Step 1: Load the diabetes dataset.
Step 2: Split the dataset into features (input) and target variable (output).
Step 3: Split the data into training and testing sets.
Step 4: Scale the features using StandardScaler.
Step 5: Train a neural network classifier on the training data.
Step 6: Evaluate the classifier's accuracy on both training and testing data.
Step 7: Create a function to predict diabetes based on user input.
Step 8: Launch a Gradio interface for users to input their data and get a prediction.
Step 9: Stop the program.
### Program:
    #import packages
    import numpy as np
    import pandas as pd
    import gradio as gr
    import pandas as pd
    data = pd.read_csv('diabetes.csv')
    data.head()
    x = data.drop(['Outcome'], axis=1)
    y = data['Outcome']
    print(x[:5])
    from sklearn.model_selection import train_test_split
    x_train, x_test, y_train, y_test= train_test_split(x,y)
    #scale data
    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    x_train_scaled = scaler.fit_transform(x_train)
    x_test_scaled = scaler.fit_transform(x_test)
    #instatiate model
    from sklearn.neural_network import MLPClassifier
    model = MLPClassifier(max_iter=1000, alpha=1)
    model.fit(x_train, y_train)
    print("Model Accuracy on training set:", model.score(x_train, y_train))
    print("Model Accuracy on Test Set:", model.score(x_test, y_test))
    #create a function for gradio
    def diabetes(Pregnancies, Glucose, Blood_Pressure, SkinThickness, Insulin, BMI
    x = np.array([Pregnancies,Glucose,Blood_Pressure,SkinThickness,Insulin,BMI
    prediction = model.predict(x.reshape(1, -1))
    if(prediction==0):
    return "NO"
    else:
    return "YES"
    outputs = gr.Textbox()
    app = gr.Interface(fn=diabetes, inputs=['number','number','number','number','n
    app.launch(share=True)

### Output:
https://private-user-images.githubusercontent.com/127173574/324427176-bb5b23d7-7192-474e-b0cc-06018e21da30.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTUwNzk2MzUsIm5iZiI6MTcxNTA3OTMzNSwicGF0aCI6Ii8xMjcxNzM1NzQvMzI0NDI3MTc2LWJiNWIyM2Q3LTcxOTItNDc0ZS1iMGNjLTA2MDE4ZTIxZGEzMC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwNTA3JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDUwN1QxMDU1MzVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1kNzdhOGFjZTcwODE5YTI5MzI2Nzc4MGEwZDU5ODcyZTljN2QzMDc2NmQ1NjE3ODk0NWQyY2ViYTFlOTcxMjVkJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.81Agvo5bs-lcxlaPi_fc_JxBVzhAgmavkpfsUxsHZnw

### Result:
Thus the system was trained successfully and the prediction was carried out.
